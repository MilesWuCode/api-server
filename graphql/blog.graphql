type Blog {
    id: ID!
    title: String!
    body: String
    status: Boolean!
    publish_at: Date
    created_at: DateTime!
    updated_at: DateTime!

    user: User! @belongsTo(relation: "user")

    # model get attribute
    like_count: Int! @with(relation: "loveReactant.reactionCounters")
    dislike_count: Int! @with(relation: "loveReactant.reactionCounters")

    # call function
    # like_count: Int! @with(relation: "loveReactant.reactionCounters") @field(resolver: "\\App\\GraphQL\\Types\\LoveType@getLikeCount")
    # dislike_count: Int! @with(relation: "loveReactant.reactionCounters") @field(resolver: "\\App\\GraphQL\\Types\\LoveType@getDislikeCount")

    tag(orderBy: _ @orderBy(columns: ["id", "created_at"])): [Tag!]!
        @morphMany(relation: "tags", type: PAGINATOR, defaultCount: 3)

    gallery: [Media!]
        @morphMany(relation: "gallery", type: PAGINATOR, defaultCount: 3)
}

extend type Query {
    blog(id: ID @eq): Blog @find

    blogs(orderBy: _ @orderBy(columns: ["id", "created_at"])): [Blog!]!
        @paginate
    # @paginate(type:CONNECTION)

    myBlog(id: ID @eq): Blog @find @whereAuth(relation: "user") @guard

    myBlogs(orderBy: _ @orderBy(columns: ["id", "created_at"])): [Blog!]!
        @paginate
        @whereAuth(relation: "user")
        @guard
}

extend type Mutation {
    createBlog(
        title: String! @rules(apply: ["required", "string", "max:100"])
        body: String @rules(apply: ["sometimes", "required", "string", "max:100"])
        tag: [String]
            @rules(apply: ["sometimes", "required"])
            @rulesForArray(apply: ["sometimes", "max:6"])
        gallery: [String]
            @rules(apply: ["sometimes", "required", "App\\Rules\\FileExist"])
            @rulesForArray(apply: ["sometimes", "max:10"])
    ): Blog
        # @create(model: "App\\Models\\Blog")
        @field(resolver: "Blog@create")
        @guard
        @can(ability: "create", model: "App\\Models\\Blog")
        @inject(context: "user.id", name: "user_id")

    updateBlog(
        id: ID @eq
        title: String! @rules(apply: ["required", "string", "max:100"])
        body: String @rules(apply: ["sometimes", "required", "string", "max:100"])
        tag: [String]
            @rules(apply: ["sometimes", "required"])
            @rulesForArray(apply: ["sometimes", "max:6"])
    ): Blog
        # @update(model: "App\\Models\\Blog")
        @field(resolver: "Blog@update")
        @guard
        @can(ability: "update", model: "App\\Models\\Blog", query: true)
        @inject(context: "user.id", name: "user_id")
}
